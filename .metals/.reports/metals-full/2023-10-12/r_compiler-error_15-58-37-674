java.lang.IndexOutOfBoundsException: 0
occurred in the presentation compiler.

action parameters:
offset: 701
uri: file://<WORKSPACE>/src/test/scala/Mux/MuxTest.scala
text:
package Mux

import chisel3._
import chisel3.util._
import chisel3.experimental.BundleLiterals._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec
import scala.util.Random


class MuxTest extends AnyFlatSpec with ChiselScalatestTester { 
  behavior of "Mux Module"


//   "Mux2to1" should s"work for multibit" in {
//     test(new Mux(10)){ dut => 
//         dut.io.sel.poke(1.U)//true, d2
//         println(dut.io.sel.peek())
//         dut.io.d1.poke(666.U)
//         dut.io.d2.poke(999.U)

//         dut.io.out.expect(999.U)
//     }
//  }

  def randomTest(width: Int) = {
    val in1 = BigInt(width, Random)
    val in2 = BigInt(width, Random) 
    val select = Random.nextInt(2)(@@)
    val in1UInt = in1.U(width.W)
    val in2UInt = in2.U(width.W)
    

    val expected = if(select===1) in2UInt else in1UInt//if statement //replaceable: If c, then x; else y 

    //singular test thats generated in for loop below
    it should s"calculate results for: width = $width, sel = $select, in1 = $in1, in2 = $in2 expected = $expected" in {
      test(new Mux(width)) { dut =>
        dut.io.sel.poke(select.U)
        println(dut.io.sel.peek())
        dut.io.d1.poke(in1UInt)
        dut.io.d2.poke(in1UInt)
        
        dut.io.out.expect(expected)
      }
    }
  }

  //generate seq of random widths in range  1 -> 64, add 64 to end
  var randomWidths: Seq[Int] = Seq.fill(5)(Random.nextInt(64) + 1)
  randomWidths = randomWidths :+ 64

  //generate 6 tests for all (6) widths 
  for (width <- randomWidths) {
      randomTest(width)
  }
  println("Done!")
}





error stacktrace:
scala.collection.LinearSeqOps.apply(LinearSeq.scala:131)
	scala.collection.LinearSeqOps.apply$(LinearSeq.scala:128)
	scala.collection.immutable.List.apply(List.scala:79)
	dotty.tools.dotc.util.Signatures$.countParams(Signatures.scala:501)
	dotty.tools.dotc.util.Signatures$.applyCallInfo(Signatures.scala:186)
	dotty.tools.dotc.util.Signatures$.computeSignatureHelp(Signatures.scala:94)
	dotty.tools.dotc.util.Signatures$.signatureHelp(Signatures.scala:63)
	scala.meta.internal.pc.MetalsSignatures$.signatures(MetalsSignatures.scala:17)
	scala.meta.internal.pc.SignatureHelpProvider$.signatureHelp(SignatureHelpProvider.scala:51)
	scala.meta.internal.pc.ScalaPresentationCompiler.signatureHelp$$anonfun$1(ScalaPresentationCompiler.scala:371)
